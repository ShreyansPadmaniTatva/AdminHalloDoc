@using AdminHalloDoc.Entities.Models;
@using AdminHalloDoc.Models.CV;
@using AdminHalloDoc.Repositories.Admin.Repository.Interface;
@using System.Text;
@using static AdminHalloDoc.Repositories.Admin.Repository.LoginRepository;
@using static AdminHalloDoc.Entities.ViewModel.Constant;
@inject ILoginRepository loginRepository
@{
    string path = Context.Request.Path;
    List<MenuItem> Staticmenu = loginRepository.SetMenu(CV.RoleId());
}
<nav class="navbar p-0 pt-2 px-5 navbar-expand-lg bg-body shadow mb-5  rounded">
    <div class="container-fluid justify-content-">
        <!-- <a class="navbar-brand" href="#">Patient_</a> -->

        <div class="" id="navbarSupportedContent">
            <ul id="navlist" data-hidden="true" class="navlist navbar-nav me-auto mb-2 mb-lg-0 fw-bold">
              @*  <button class="nav-toggle toggle--close" aria-label="close menu">
                    &#x2573;
                </button>*@
                <h5 class="text-dark align-bottom p-3 pb-1 mobile-name">
                    Welcome <span class="fw-bolder"> @CV.UserName() </span>
                </h5>
                @foreach (var menuItem in Staticmenu)
                {
                    if (menuItem.Submenu is null)
                    {
                        <li class="nav-item">
                            @{
                                // Determine if any URL prefix in UrlList matches the beginning of the current path
                                bool isActive = false;
                                if (menuItem.UrlList!= null && menuItem.UrlList.Count > 0)
                                {
                                    isActive = menuItem.UrlList.Any(prefix => path.StartsWith(prefix));
                                    
                                }
                            }
                            <a class="nav-link px-4 @(isActive ? "active" : "")" href="@menuItem.Url">@menuItem.Label</a>
                        </li>
                    }
                    else if (menuItem.Submenu is List<MenuItem> dropdownMenu)
                    {
                        <li class="nav-item dropdown">
                            @{
                                // Determine if any URL prefix in UrlList matches the beginning of the current path
                                bool isActive = false;
                                if (menuItem.UrlList != null && menuItem.UrlList.Count > 0)
                                {
                                    isActive = menuItem.UrlList.Any(prefix => path.StartsWith(prefix));

                                }
                            }
                            <a class="nav-link px-4 dropdown-toggle @(isActive ? "active" : "") @(dropdownMenu.Any(item => path.StartsWith(item.Url)) ? "active" : "")" data-bs-toggle="dropdown" aria-expanded="false">@menuItem.Label</a>
                            <ul class="dropdown-menu border-0 nn">
                                @foreach (var subMenuItem in dropdownMenu)
                                {
                                    <li><a class="dropdown-item n @(path.StartsWith(subMenuItem.Url) ? "active" : "")" href="@subMenuItem.Url">@subMenuItem.Label</a></li>
                                }
                            </ul>
                        </li>
                    }
                }
               
            </ul>
        </div>
    </div>
</nav>
