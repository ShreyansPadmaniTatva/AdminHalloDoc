@model AdminHalloDoc.Entities.ViewModel.AdminViewModel.ViewActions
@using AdminHalloDoc.Models.CV;
<div class="modal-header  bg-info text-white">
    <img alt="" src="" />
    <h1 class="modal-title fs-5" id="exampleModalLabel">Provider chat</h1>
    <button type="button" class="btn btn-transparent btn-icon btn-lg text-light" data-bs-dismiss="modal" aria-label="Close">
        <i class="bi bi-x-circle"></i>
    </button>
</div>

<div class=" modal-body bg-light bg-gradient">
    <h3 class="modal-title fs-5" id="exampleModalLabel">Patient Name : <span class="text-info" id="patientname"> @Model.PatientName </span></h3>
    <div class="row">
        <div class="col-md-12 mockchat">
            <div class="app" id="messagesList"></div>
        </div>
    </div>
    <input type="hidden" id="requestId" asp-for="RequestID" />
    <input type="hidden" id="receiverId" asp-for="ProviderId" />
    <input type="hidden" id="receiverName" asp-for="PhysicianName" />
    <input type="hidden" id="receiverType" asp-for="ReceiverType" />
    <input type="text" class="form-control d-none" value="@Model.PhysicianConnectionId" id="userInput" />
    <div class="row">
        <div class="col-md-10"><input type="text" class="form-control" id="messageInput" /></div>
        <div class="col-md-2 text-start">
            <button id="sendButton" class="btn btn-info text-white">
                <i class="fa-solid fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>
<script>

    // Invoking CheckHistory method
    connection.invoke("CheckHistory",
        document.getElementById("userInput").value,         // user
        document.getElementById("messageInput").value,      // message
        parseInt(document.getElementById("requestId").value),         // requestId
        parseInt(document.getElementById("receiverId").value),        // RecieverId
        document.getElementById("receiverName").value,      // RecieverName
        document.getElementById("receiverType").value)                                            // RecieverType
        .then(function (chatHistory) {
            console.log(chatHistory);
            // Display the chat history
            var previousDate = null;

            chatHistory.forEach(function (chat) {
                var dateObj = new Date(chat.datetime);
                var currentDate = dateObj.getDate();
                var currentMonth = dateObj.toLocaleString('default', { month: 'long' });
                var currentYear = dateObj.getFullYear();
                var dateString = currentDate + ", " + currentMonth + ", " + currentYear;

                if (dateString !== previousDate) {
                    // Print date if it's different from the previous message's date
                    var dateDiv = document.createElement("h5");
                    dateDiv.textContent = dateString;
                    dateDiv.classList.add("date");
                    document.getElementById("messagesList").appendChild(dateDiv);
                    previousDate = dateString;
                }

                var li = document.createElement("div");
                var span = document.createElement("span");
                var div2 = document.createElement("div");

                span.textContent = ` says ${chat.message}`;
                div2.textContent = dateObj.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                li.appendChild(span);
                li.appendChild(div2);
                document.getElementById("messagesList").appendChild(li);

                div2.style.fontSize = "0.8rem"; // Add font-size style
                li.classList.add("first-replay");

                if ("@CV.role().ToString()" == "Provider" && chat.physicianId != 0) {
                    li.classList.add("text-end");
                    span.classList.add("reply");
                } else if ("@CV.role().ToString()" == "Admin" && chat.adminId != 0) {
                    li.classList.add("text-end");
                    span.classList.add("reply");
                } else if ("@CV.role().ToString()" == "Patient" && (chat.adminId == 0 && chat.physicianId == 0)) {
                    li.classList.add("text-end");
                    span.classList.add("reply");
                } else {
                    li.classList.add("text-start");
                    span.classList.add("reply-sender");
                }

                div2.classList.add("mt-2");
                div2.classList.add("ms-3");
                div2.classList.add("font-monospace");
            });
            var messagesList = document.getElementById("messagesList");
            messagesList.scrollTop = messagesList.scrollHeight;
            
        })
        .catch(function (err) {
            console.error(err.toString());
        });
    var messagesList = document.getElementById("messagesList");
    messagesList.scrollTop = messagesList.scrollHeight;
    // Event listener for sending a message
    document.getElementById("sendButton").addEventListener("click", function (event) {
        var user = document.getElementById("userInput").value;
        var message = document.getElementById("messageInput").value;
        document.getElementById("messageInput").value = "";
        // Invoking SendMessage method
        connection.invoke("SendMessage",
            user,                       // user
            message,                    // message
            parseInt(document.getElementById("requestId").value),         // requestId
            parseInt(document.getElementById("receiverId").value),        // RecieverId
            document.getElementById("receiverName").value,      // RecieverName
            document.getElementById("receiverType").value)                    // RecieverType
            .catch(function (err) {
                return console.error(err.toString());
            });
        event.preventDefault();
    });
</script>